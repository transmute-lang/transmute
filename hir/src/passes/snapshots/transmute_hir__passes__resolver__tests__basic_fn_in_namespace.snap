---
source: hir/src/passes/resolver.rs
expression: hir
---
Hir {
    identifiers: [
        IdentId(0) => "<root>",
        IdentId(1) => "ns",
        IdentId(2) => "f",
        IdentId(3) => "core",
        IdentId(4) => "boolean",
        IdentId(5) => "number",
        IdentId(6) => "void",
    ],
    identifier_refs: [],
    expressions: [
        ExprId(0) => Expression {
            id: ExprId(0),
            kind: Block(
                [
                    StmtId(4),
                ],
            ),
            span: 1:24; [23, 25],
            typed: Typed(2),
        },
    ],
    statements: [
        StmtId(0) => Statement {
            id: StmtId(0),
            kind: Namespace(
                Identifier {
                    id: IdentId(0),
                    span: 0:0; [0, 0],
                    bound: Bound(1),
                },
                InputId(0),
                [
                    StmtId(2),
                    StmtId(3),
                ],
            ),
            span: 0:0; [0, 0],
        },
        StmtId(1) => Statement {
            id: StmtId(1),
            kind: LetFn(
                Identifier {
                    id: IdentId(2),
                    span: 1:20; [19, 20],
                    bound: Bound(4),
                },
                [],
                [],
                Return {
                    type_def_id: None,
                    typed: Typed(1),
                },
                Provided(
                    ExprId(0),
                ),
            ),
            span: 1:16; [15, 25],
        },
        StmtId(2) => Statement {
            id: StmtId(2),
            kind: Namespace(
                Identifier {
                    id: IdentId(1),
                    span: 1:11; [10, 12],
                    bound: Bound(2),
                },
                InputId(0),
                [
                    StmtId(1),
                ],
            ),
            span: 1:27; [26, 27],
        },
        StmtId(3) => Statement {
            id: StmtId(3),
            kind: Namespace(
                Identifier {
                    id: IdentId(3),
                    span: 2:11; [38, 42],
                    bound: Bound(3),
                },
                InputId(0),
                [],
            ),
            span: 2:17; [44, 45],
        },
        StmtId(4) => Statement {
            id: StmtId(4),
            kind: Ret(
                None,
                Implicit,
            ),
            span: 1:24; [23, 25],
        },
    ],
    type_defs: [],
    root: StmtId(0),
    symbols: [
        SymbolId(0) => Symbol {
            id: SymbolId(0),
            kind: NotFound,
            type_id: TypeId(0),
        },
        SymbolId(1) => Symbol {
            id: SymbolId(1),
            kind: Namespace(
                IdentId(0),
                {
                    IdentId(1): [
                        SymbolId(2),
                    ],
                    IdentId(3): [
                        SymbolId(3),
                    ],
                },
            ),
            type_id: TypeId(1),
        },
        SymbolId(2) => Symbol {
            id: SymbolId(2),
            kind: Namespace(
                IdentId(1),
                {
                    IdentId(2): [
                        SymbolId(4),
                    ],
                },
            ),
            type_id: TypeId(1),
        },
        SymbolId(3) => Symbol {
            id: SymbolId(3),
            kind: Namespace(
                IdentId(3),
                {},
            ),
            type_id: TypeId(1),
        },
        SymbolId(4) => Symbol {
            id: SymbolId(4),
            kind: LetFn(
                IdentId(2),
                StmtId(1),
                [],
                TypeId(1),
            ),
            type_id: TypeId(5),
        },
    ],
    types: [
        TypeId(0) => Invalid,
        TypeId(1) => Void,
        TypeId(2) => None,
        TypeId(3) => Boolean,
        TypeId(4) => Number,
        TypeId(5) => Function(
            [],
            TypeId(1),
        ),
    ],
    exit_points: ExitPoints {
        exit_points: {
            ExprId(0): [
                Implicit(
                    None,
                ),
            ],
        },
        unreachable: [],
    },
}
