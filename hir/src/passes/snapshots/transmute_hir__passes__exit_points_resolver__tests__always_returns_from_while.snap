---
source: hir/src/passes/exit_points_resolver.rs
expression: "(ast, block_exit_points)"
---
(
    Ast {
        identifiers: [
            IdentId(0) => "f",
        ],
        identifier_refs: [],
        expressions: [
            ExprId(0) => Expression {
                id: ExprId(0),
                kind: Literal(
                    Literal {
                        kind: Boolean(true),
                        span: 3:15; [31, 35],
                    },
                ),
                span: 3:15; [31, 35],
            },
            ExprId(1) => Expression {
                id: ExprId(1),
                kind: Literal(
                    Literal {
                        kind: Number(42),
                        span: 4:17; [54, 56],
                    },
                ),
                span: 4:17; [54, 56],
            },
            ExprId(2) => Expression {
                id: ExprId(2),
                kind: Block(
                    [
                        StmtId(0),
                    ],
                ),
                span: 3:20; [36, 67],
            },
            ExprId(3) => Expression {
                id: ExprId(3),
                kind: While(
                    ExprId(0),
                    ExprId(2),
                ),
                span: 3:9; [25, 67],
            },
            ExprId(4) => Expression {
                id: ExprId(4),
                kind: Literal(
                    Literal {
                        kind: Number(43),
                        span: 6:13; [80, 82],
                    },
                ),
                span: 6:13; [80, 82],
            },
            ExprId(5) => Expression {
                id: ExprId(5),
                kind: Block(
                    [
                        StmtId(1),
                        StmtId(2),
                    ],
                ),
                span: 2:15; [15, 89],
            },
        ],
        statements: [
            StmtId(0) => Statement {
                id: StmtId(0),
                kind: Ret(
                    Some(
                        ExprId(1),
                    ),
                    Explicit,
                ),
                span: 4:13; [50, 57],
            },
            StmtId(1) => Statement {
                id: StmtId(1),
                kind: Expression(
                    ExprId(3),
                ),
                span: 3:9; [25, 67],
            },
            StmtId(2) => Statement {
                id: StmtId(2),
                kind: Ret(
                    Some(
                        ExprId(4),
                    ),
                    Explicit,
                ),
                span: 6:9; [76, 83],
            },
            StmtId(3) => Statement {
                id: StmtId(3),
                kind: LetFn(
                    Identifier {
                        id: IdentId(0),
                        span: 2:9; [9, 10],
                    },
                    [],
                    [],
                    Return {
                        type_def_id: None,
                    },
                    ExprId(5),
                ),
                span: 2:5; [5, 89],
            },
        ],
        type_defs: [],
        roots: [
            StmtId(3),
        ],
    },
    [
        (
            ExprId(2),
            Output {
                exit_points: [
                    Explicit(
                        Some(
                            ExprId(1),
                        ),
                    ),
                ],
                unreachable: [],
            },
        ),
        (
            ExprId(5),
            Output {
                exit_points: [
                    Explicit(
                        Some(
                            ExprId(1),
                        ),
                    ),
                ],
                unreachable: [
                    ExprId(4),
                ],
            },
        ),
    ],
)
