---
source: hir/src/passes/resolver.rs
expression: hir
---
Hir {
    identifiers: [
        IdentId(0) => "<root>",
        IdentId(1) => "x",
        IdentId(2) => "n",
        IdentId(3) => "number",
        IdentId(4) => "core",
        IdentId(5) => "add",
        IdentId(6) => "boolean",
        IdentId(7) => "div",
        IdentId(8) => "eq",
        IdentId(9) => "ge",
        IdentId(10) => "gt",
        IdentId(11) => "le",
        IdentId(12) => "lt",
        IdentId(13) => "mul",
        IdentId(14) => "neg",
        IdentId(15) => "neq",
        IdentId(16) => "sub",
        IdentId(17) => "void",
    ],
    identifier_refs: [
        IdentRefId(0) => IdentifierRef {
            id: IdentRefId(0),
            ident: Identifier {
                id: IdentId(3),
                span: 1:10; [9, 15],
                bound: Bound(4),
            },
        },
        IdentRefId(1) => IdentifierRef {
            id: IdentRefId(1),
            ident: Identifier {
                id: IdentId(3),
                span: 1:19; [18, 24],
                bound: Bound(4),
            },
        },
        IdentRefId(2) => IdentifierRef {
            id: IdentRefId(2),
            ident: Identifier {
                id: IdentId(2),
                span: 1:30; [29, 30],
                bound: Bound(20),
            },
        },
    ],
    expressions: [
        ExprId(0) => Expression {
            id: ExprId(0),
            kind: Literal(
                Literal {
                    kind: IdentRefId(2),
                    span: 1:30; [29, 30],
                },
            ),
            span: 1:30; [29, 30],
            typed: Typed(4),
        },
        ExprId(1) => Expression {
            id: ExprId(1),
            kind: Block(
                [
                    StmtId(1),
                ],
            ),
            span: 1:28; [27, 33],
            typed: Typed(2),
        },
    ],
    statements: [
        StmtId(0) => Statement {
            id: StmtId(0),
            kind: Namespace(
                Identifier {
                    id: IdentId(0),
                    span: 0:0; [0, 0],
                    bound: Bound(1),
                },
                InputId(0),
                [
                    StmtId(2),
                    StmtId(3),
                ],
            ),
            span: 0:0; [0, 0],
        },
        StmtId(1) => Statement {
            id: StmtId(1),
            kind: Ret(
                Some(
                    ExprId(0),
                ),
                Implicit,
            ),
            span: 1:30; [29, 31],
        },
        StmtId(2) => Statement {
            id: StmtId(2),
            kind: LetFn(
                Identifier {
                    id: IdentId(1),
                    span: 1:5; [4, 5],
                    bound: Bound(19),
                },
                [],
                [
                    Parameter {
                        identifier: Identifier {
                            id: IdentId(2),
                            span: 1:7; [6, 7],
                            bound: Bound(20),
                        },
                        type_def_id: TypeDefId(0),
                        span: 1:7; [6, 15],
                        typed: Typed(4),
                    },
                ],
                Return {
                    type_def_id: Some(
                        TypeDefId(1),
                    ),
                    typed: Typed(4),
                },
                Provided(
                    ExprId(1),
                ),
            ),
            span: 1:1; [0, 33],
        },
        StmtId(3) => Statement {
            id: StmtId(3),
            kind: Namespace(
                Identifier {
                    id: IdentId(4),
                    span: 2:11; [44, 48],
                    bound: Bound(2),
                },
                InputId(0),
                [],
            ),
            span: 2:17; [50, 51],
        },
    ],
    type_defs: [
        TypeDefId(0) => TypeDef {
            kind: Simple(
                [
                    IdentRefId(0),
                ],
            ),
            span: 1:10; [9, 15],
        },
        TypeDefId(1) => TypeDef {
            kind: Simple(
                [
                    IdentRefId(1),
                ],
            ),
            span: 1:19; [18, 24],
        },
    ],
    root: StmtId(0),
    symbols: [
        SymbolId(0) => Symbol {
            id: SymbolId(0),
            kind: NotFound,
            type_id: TypeId(0),
        },
        SymbolId(1) => Symbol {
            id: SymbolId(1),
            kind: Namespace(
                IdentId(0),
                None,
                {},
                {
                    IdentId(1): [
                        SymbolId(19),
                    ],
                    IdentId(4): [
                        SymbolId(2),
                    ],
                },
            ),
            type_id: TypeId(1),
        },
        SymbolId(2) => Symbol {
            id: SymbolId(2),
            kind: Namespace(
                IdentId(4),
                Some(
                    SymbolId(1),
                ),
                {},
                {
                    IdentId(3): [
                        SymbolId(4),
                    ],
                    IdentId(5): [
                        SymbolId(18),
                    ],
                    IdentId(6): [
                        SymbolId(5),
                    ],
                    IdentId(7): [
                        SymbolId(17),
                    ],
                    IdentId(8): [
                        SymbolId(15),
                        SymbolId(16),
                    ],
                    IdentId(9): [
                        SymbolId(14),
                    ],
                    IdentId(10): [
                        SymbolId(13),
                    ],
                    IdentId(11): [
                        SymbolId(12),
                    ],
                    IdentId(12): [
                        SymbolId(11),
                    ],
                    IdentId(13): [
                        SymbolId(10),
                    ],
                    IdentId(14): [
                        SymbolId(9),
                    ],
                    IdentId(15): [
                        SymbolId(7),
                        SymbolId(8),
                    ],
                    IdentId(16): [
                        SymbolId(6),
                    ],
                    IdentId(17): [
                        SymbolId(3),
                    ],
                },
            ),
            type_id: TypeId(1),
        },
        SymbolId(3) => Symbol {
            id: SymbolId(3),
            kind: NativeType(
                IdentId(17),
                Void,
            ),
            type_id: TypeId(2),
        },
        SymbolId(4) => Symbol {
            id: SymbolId(4),
            kind: NativeType(
                IdentId(3),
                Number,
            ),
            type_id: TypeId(2),
        },
        SymbolId(5) => Symbol {
            id: SymbolId(5),
            kind: NativeType(
                IdentId(6),
                Boolean,
            ),
            type_id: TypeId(2),
        },
        SymbolId(6) => Symbol {
            id: SymbolId(6),
            kind: Native(
                IdentId(16),
                [
                    TypeId(4),
                    TypeId(4),
                ],
                TypeId(4),
                SubNumberNumber,
            ),
            type_id: TypeId(5),
        },
        SymbolId(7) => Symbol {
            id: SymbolId(7),
            kind: Native(
                IdentId(15),
                [
                    TypeId(4),
                    TypeId(4),
                ],
                TypeId(3),
                NeqNumberNumber,
            ),
            type_id: TypeId(6),
        },
        SymbolId(8) => Symbol {
            id: SymbolId(8),
            kind: Native(
                IdentId(15),
                [
                    TypeId(3),
                    TypeId(3),
                ],
                TypeId(3),
                NeqBooleanBoolean,
            ),
            type_id: TypeId(7),
        },
        SymbolId(9) => Symbol {
            id: SymbolId(9),
            kind: Native(
                IdentId(14),
                [
                    TypeId(4),
                ],
                TypeId(4),
                NegNumber,
            ),
            type_id: TypeId(8),
        },
        SymbolId(10) => Symbol {
            id: SymbolId(10),
            kind: Native(
                IdentId(13),
                [
                    TypeId(4),
                    TypeId(4),
                ],
                TypeId(4),
                MulNumberNumber,
            ),
            type_id: TypeId(5),
        },
        SymbolId(11) => Symbol {
            id: SymbolId(11),
            kind: Native(
                IdentId(12),
                [
                    TypeId(4),
                    TypeId(4),
                ],
                TypeId(3),
                LtNumberNumber,
            ),
            type_id: TypeId(6),
        },
        SymbolId(12) => Symbol {
            id: SymbolId(12),
            kind: Native(
                IdentId(11),
                [
                    TypeId(4),
                    TypeId(4),
                ],
                TypeId(3),
                LeNumberNumber,
            ),
            type_id: TypeId(6),
        },
        SymbolId(13) => Symbol {
            id: SymbolId(13),
            kind: Native(
                IdentId(10),
                [
                    TypeId(4),
                    TypeId(4),
                ],
                TypeId(3),
                GtNumberNumber,
            ),
            type_id: TypeId(6),
        },
        SymbolId(14) => Symbol {
            id: SymbolId(14),
            kind: Native(
                IdentId(9),
                [
                    TypeId(4),
                    TypeId(4),
                ],
                TypeId(3),
                GeNumberNumber,
            ),
            type_id: TypeId(6),
        },
        SymbolId(15) => Symbol {
            id: SymbolId(15),
            kind: Native(
                IdentId(8),
                [
                    TypeId(4),
                    TypeId(4),
                ],
                TypeId(3),
                EqNumberNumber,
            ),
            type_id: TypeId(6),
        },
        SymbolId(16) => Symbol {
            id: SymbolId(16),
            kind: Native(
                IdentId(8),
                [
                    TypeId(3),
                    TypeId(3),
                ],
                TypeId(3),
                EqBooleanBoolean,
            ),
            type_id: TypeId(7),
        },
        SymbolId(17) => Symbol {
            id: SymbolId(17),
            kind: Native(
                IdentId(7),
                [
                    TypeId(4),
                    TypeId(4),
                ],
                TypeId(4),
                DivNumberNumber,
            ),
            type_id: TypeId(5),
        },
        SymbolId(18) => Symbol {
            id: SymbolId(18),
            kind: Native(
                IdentId(5),
                [
                    TypeId(4),
                    TypeId(4),
                ],
                TypeId(4),
                AddNumberNumber,
            ),
            type_id: TypeId(5),
        },
        SymbolId(19) => Symbol {
            id: SymbolId(19),
            kind: LetFn(
                IdentId(1),
                StmtId(2),
                [
                    TypeId(4),
                ],
                TypeId(4),
            ),
            type_id: TypeId(8),
        },
        SymbolId(20) => Symbol {
            id: SymbolId(20),
            kind: Parameter(
                IdentId(2),
                StmtId(2),
                0,
            ),
            type_id: TypeId(4),
        },
    ],
    types: [
        TypeId(0) => Invalid,
        TypeId(1) => Void,
        TypeId(2) => None,
        TypeId(3) => Boolean,
        TypeId(4) => Number,
        TypeId(5) => Function(
            [
                TypeId(4),
                TypeId(4),
            ],
            TypeId(4),
        ),
        TypeId(6) => Function(
            [
                TypeId(4),
                TypeId(4),
            ],
            TypeId(3),
        ),
        TypeId(7) => Function(
            [
                TypeId(3),
                TypeId(3),
            ],
            TypeId(3),
        ),
        TypeId(8) => Function(
            [
                TypeId(4),
            ],
            TypeId(4),
        ),
    ],
    exit_points: ExitPoints {
        exit_points: {
            ExprId(1): [
                Implicit(
                    Some(
                        ExprId(0),
                    ),
                ),
            ],
        },
        unreachable: [],
    },
}
