---
source: hir/src/passes/resolver.rs
expression: "&hir"
---
Hir {
    identifiers: [
        IdentId(0) => "a",
        IdentId(1) => "S",
        IdentId(2) => "boolean",
        IdentId(3) => "number",
        IdentId(4) => "void",
    ],
    identifier_refs: [
        IdentRefId(0) => IdentifierRef {
            id: IdentRefId(0),
            ident: Identifier {
                id: IdentId(0),
                span: 1:16; [15, 16],
                bound: Bound(1),
            },
        },
    ],
    expressions: [],
    statements: [
        StmtId(0) => Statement {
            id: StmtId(0),
            kind: Annotation(
                Identifier {
                    id: IdentId(0),
                    span: 1:12; [11, 12],
                    bound: Bound(1),
                },
            ),
            span: 1:1; [0, 13],
        },
        StmtId(1) => Statement {
            id: StmtId(1),
            kind: Struct(
                Identifier {
                    id: IdentId(1),
                    span: 1:25; [24, 25],
                    bound: Bound(2),
                },
                [
                    Annotation {
                        ident_ref_id: IdentRefId(0),
                        span: 1:15; [14, 16],
                    },
                ],
                Provided(
                    [],
                ),
            ),
            span: 1:18; [17, 28],
        },
    ],
    type_defs: [],
    roots: [
        StmtId(0),
        StmtId(1),
    ],
    symbols: [
        SymbolId(0) => Symbol {
            id: SymbolId(0),
            kind: NotFound,
            type_id: TypeId(0),
        },
        SymbolId(1) => Symbol {
            id: SymbolId(1),
            kind: Annotation(
                IdentId(0),
                StmtId(0),
            ),
            type_id: TypeId(1),
        },
        SymbolId(2) => Symbol {
            id: SymbolId(2),
            kind: Struct(
                IdentId(1),
                StmtId(1),
            ),
            type_id: TypeId(6),
        },
    ],
    types: [
        TypeId(0) => Invalid,
        TypeId(1) => Void,
        TypeId(2) => None,
        TypeId(3) => Boolean,
        TypeId(4) => Number,
        TypeId(5) => String,
        TypeId(6) => Struct(
            StmtId(1),
        ),
    ],
    exit_points: ExitPoints {
        exit_points: {},
        unreachable: [],
    },
}
