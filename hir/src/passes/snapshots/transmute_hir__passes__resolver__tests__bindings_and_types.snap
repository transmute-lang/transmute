---
source: hir/src/passes/resolver.rs
expression: "&hir"
---
Hir {
    identifiers: [
        IdentId(0) => "S",
        IdentId(1) => "f",
        IdentId(2) => "a",
        IdentId(3) => "b",
        IdentId(4) => "boolean",
        IdentId(5) => "number",
        IdentId(6) => "void",
    ],
    identifier_refs: [
        IdentRefId(0) => IdentifierRef {
            id: IdentRefId(0),
            ident: Identifier {
                id: IdentId(0),
                span: 1:15; [14, 15],
                bound: Bound(1),
            },
        },
        IdentRefId(1) => IdentifierRef {
            id: IdentRefId(1),
            ident: Identifier {
                id: IdentId(0),
                span: 1:28; [27, 28],
                bound: Bound(1),
            },
        },
        IdentRefId(2) => IdentifierRef {
            id: IdentRefId(2),
            ident: Identifier {
                id: IdentId(0),
                span: 1:34; [33, 34],
                bound: Bound(1),
            },
        },
        IdentRefId(3) => IdentifierRef {
            id: IdentRefId(3),
            ident: Identifier {
                id: IdentId(0),
                span: 1:38; [37, 38],
                bound: Bound(1),
            },
        },
        IdentRefId(4) => IdentifierRef {
            id: IdentRefId(4),
            ident: Identifier {
                id: IdentId(2),
                span: 1:42; [41, 42],
                bound: Bound(4),
            },
        },
    ],
    expressions: [
        ExprId(0) => Expression {
            id: ExprId(0),
            kind: Literal(
                Literal {
                    kind: IdentRefId(4),
                    span: 1:42; [41, 42],
                },
            ),
            span: 1:42; [41, 42],
            typed: Typed(5),
        },
        ExprId(1) => Expression {
            id: ExprId(1),
            kind: Block(
                [
                    StmtId(1),
                ],
            ),
            span: 1:40; [39, 45],
            typed: Typed(2),
        },
    ],
    statements: [
        StmtId(0) => Statement {
            id: StmtId(0),
            kind: Struct(
                Identifier {
                    id: IdentId(0),
                    span: 1:8; [7, 8],
                    bound: Bound(1),
                },
                [
                    Field {
                        identifier: Identifier {
                            id: IdentId(1),
                            span: 1:12; [11, 12],
                            bound: Bound(3),
                        },
                        type_def_id: TypeDefId(0),
                        span: 1:12; [11, 15],
                        typed: Typed(5),
                    },
                ],
            ),
            span: 1:1; [0, 17],
        },
        StmtId(1) => Statement {
            id: StmtId(1),
            kind: Ret(
                Some(
                    ExprId(0),
                ),
                Implicit,
            ),
            span: 1:42; [41, 43],
        },
        StmtId(2) => Statement {
            id: StmtId(2),
            kind: LetFn(
                Identifier {
                    id: IdentId(1),
                    span: 1:23; [22, 23],
                    bound: Bound(2),
                },
                [
                    Parameter {
                        identifier: Identifier {
                            id: IdentId(2),
                            span: 1:25; [24, 25],
                            bound: Bound(4),
                        },
                        type_def_id: TypeDefId(1),
                        span: 1:25; [24, 28],
                        typed: Typed(5),
                    },
                    Parameter {
                        identifier: Identifier {
                            id: IdentId(3),
                            span: 1:31; [30, 31],
                            bound: Bound(5),
                        },
                        type_def_id: TypeDefId(2),
                        span: 1:31; [30, 34],
                        typed: Typed(5),
                    },
                ],
                Return {
                    type_def_id: Some(
                        TypeDefId(3),
                    ),
                    typed: Typed(5),
                },
                ExprId(1),
            ),
            span: 1:19; [18, 45],
        },
    ],
    type_defs: [
        TypeDefId(0) => TypeDef {
            kind: Simple(
                IdentRefId(0),
            ),
            span: 1:15; [14, 15],
        },
        TypeDefId(1) => TypeDef {
            kind: Simple(
                IdentRefId(1),
            ),
            span: 1:28; [27, 28],
        },
        TypeDefId(2) => TypeDef {
            kind: Simple(
                IdentRefId(2),
            ),
            span: 1:34; [33, 34],
        },
        TypeDefId(3) => TypeDef {
            kind: Simple(
                IdentRefId(3),
            ),
            span: 1:38; [37, 38],
        },
    ],
    roots: [
        StmtId(0),
        StmtId(2),
    ],
    symbols: [
        SymbolId(0) => Symbol {
            id: SymbolId(0),
            kind: NotFound,
            type_id: TypeId(0),
        },
        SymbolId(1) => Symbol {
            id: SymbolId(1),
            kind: Struct(
                IdentId(0),
                StmtId(0),
            ),
            type_id: TypeId(5),
        },
        SymbolId(2) => Symbol {
            id: SymbolId(2),
            kind: LetFn(
                IdentId(1),
                StmtId(2),
                [
                    TypeId(5),
                    TypeId(5),
                ],
                TypeId(5),
            ),
            type_id: TypeId(6),
        },
        SymbolId(3) => Symbol {
            id: SymbolId(3),
            kind: Field(
                IdentId(1),
                StmtId(0),
                0,
            ),
            type_id: TypeId(5),
        },
        SymbolId(4) => Symbol {
            id: SymbolId(4),
            kind: Parameter(
                IdentId(2),
                StmtId(2),
                0,
            ),
            type_id: TypeId(5),
        },
        SymbolId(5) => Symbol {
            id: SymbolId(5),
            kind: Parameter(
                IdentId(3),
                StmtId(2),
                1,
            ),
            type_id: TypeId(5),
        },
    ],
    types: [
        TypeId(0) => Invalid,
        TypeId(1) => Void,
        TypeId(2) => None,
        TypeId(3) => Boolean,
        TypeId(4) => Number,
        TypeId(5) => Struct(
            StmtId(0),
        ),
        TypeId(6) => Function(
            [
                TypeId(5),
                TypeId(5),
            ],
            TypeId(5),
        ),
    ],
    exit_points: ExitPoints {
        exit_points: {
            ExprId(1): [
                Implicit(
                    Some(
                        ExprId(0),
                    ),
                ),
            ],
        },
        unreachable: [],
    },
}
