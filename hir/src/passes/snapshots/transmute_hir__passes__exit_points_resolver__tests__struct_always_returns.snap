---
source: hir/src/passes/exit_points_resolver.rs
expression: "(ast, block_exit_points)"
---
(
    Ast {
        identifiers: [
            IdentId(0) => "<root>",
            IdentId(1) => "S",
            IdentId(2) => "x",
            IdentId(3) => "number",
            IdentId(4) => "y",
            IdentId(5) => "eq",
        ],
        identifier_refs: [
            IdentRefId(0) => IdentifierRef {
                id: IdentRefId(0),
                ident: Identifier {
                    id: IdentId(3),
                    span: 2:19; [19, 25],
                },
            },
            IdentRefId(1) => IdentifierRef {
                id: IdentRefId(1),
                ident: Identifier {
                    id: IdentId(3),
                    span: 2:30; [30, 36],
                },
            },
            IdentRefId(2) => IdentifierRef {
                id: IdentRefId(2),
                ident: Identifier {
                    id: IdentId(3),
                    span: 3:14; [51, 57],
                },
            },
            IdentRefId(3) => IdentifierRef {
                id: IdentRefId(3),
                ident: Identifier {
                    id: IdentId(2),
                    span: 5:13; [86, 87],
                },
            },
            IdentRefId(4) => IdentifierRef {
                id: IdentRefId(4),
                ident: Identifier {
                    id: IdentId(5),
                    span: 5:19; [92, 94],
                },
            },
            IdentRefId(5) => IdentifierRef {
                id: IdentRefId(5),
                ident: Identifier {
                    id: IdentId(4),
                    span: 6:13; [141, 142],
                },
            },
            IdentRefId(6) => IdentifierRef {
                id: IdentRefId(6),
                ident: Identifier {
                    id: IdentId(1),
                    span: 4:9; [70, 71],
                },
            },
        ],
        expressions: [
            ExprId(0) => Expression {
                id: ExprId(0),
                kind: Literal(
                    Literal {
                        kind: IdentRefId(4),
                        span: 5:19; [92, 94],
                    },
                ),
                span: 5:19; [92, 94],
            },
            ExprId(1) => Expression {
                id: ExprId(1),
                kind: Literal(
                    Literal {
                        kind: Number(1),
                        span: 5:22; [95, 96],
                    },
                ),
                span: 5:22; [95, 96],
            },
            ExprId(2) => Expression {
                id: ExprId(2),
                kind: Literal(
                    Literal {
                        kind: Number(1),
                        span: 5:25; [98, 99],
                    },
                ),
                span: 5:25; [98, 99],
            },
            ExprId(3) => Expression {
                id: ExprId(3),
                kind: FunctionCall(
                    ExprId(0),
                    [
                        ExprId(1),
                        ExprId(2),
                    ],
                ),
                span: 5:19; [92, 100],
            },
            ExprId(4) => Expression {
                id: ExprId(4),
                kind: Literal(
                    Literal {
                        kind: Number(1),
                        span: 5:34; [107, 108],
                    },
                ),
                span: 5:34; [107, 108],
            },
            ExprId(5) => Expression {
                id: ExprId(5),
                kind: Block(
                    [
                        StmtId(2),
                    ],
                ),
                span: 5:28; [101, 111],
            },
            ExprId(6) => Expression {
                id: ExprId(6),
                kind: Literal(
                    Literal {
                        kind: Number(2),
                        span: 5:50; [123, 124],
                    },
                ),
                span: 5:50; [123, 124],
            },
            ExprId(7) => Expression {
                id: ExprId(7),
                kind: Block(
                    [
                        StmtId(3),
                    ],
                ),
                span: 5:44; [117, 127],
            },
            ExprId(8) => Expression {
                id: ExprId(8),
                kind: If(
                    ExprId(3),
                    ExprId(5),
                    Some(
                        ExprId(7),
                    ),
                ),
                span: 5:16; [89, 127],
            },
            ExprId(9) => Expression {
                id: ExprId(9),
                kind: Literal(
                    Literal {
                        kind: Number(1),
                        span: 6:16; [144, 145],
                    },
                ),
                span: 6:16; [144, 145],
            },
            ExprId(10) => Expression {
                id: ExprId(10),
                kind: StructInstantiation(
                    IdentRefId(6),
                    [
                        (
                            IdentRefId(3),
                            ExprId(8),
                        ),
                        (
                            IdentRefId(5),
                            ExprId(9),
                        ),
                    ],
                ),
                span: 4:9; [70, 155],
            },
            ExprId(11) => Expression {
                id: ExprId(11),
                kind: Block(
                    [
                        StmtId(4),
                    ],
                ),
                span: 3:23; [60, 162],
            },
        ],
        statements: [
            StmtId(0) => Statement {
                id: StmtId(0),
                kind: Namespace(
                    Identifier {
                        id: IdentId(0),
                        span: 0:0; [0, 0],
                    },
                    None,
                    InputId(0),
                    [
                        StmtId(1),
                        StmtId(5),
                    ],
                ),
                span: 0:0; [0, 0],
            },
            StmtId(1) => Statement {
                id: StmtId(1),
                kind: Struct(
                    Identifier {
                        id: IdentId(1),
                        span: 2:12; [12, 13],
                    },
                    [],
                    [
                        Field {
                            identifier: Identifier {
                                id: IdentId(2),
                                span: 2:16; [16, 17],
                            },
                            type_def_id: TypeDefId(0),
                            span: 2:16; [16, 25],
                        },
                        Field {
                            identifier: Identifier {
                                id: IdentId(4),
                                span: 2:27; [27, 28],
                            },
                            type_def_id: TypeDefId(1),
                            span: 2:27; [27, 36],
                        },
                    ],
                ),
                span: 2:5; [5, 37],
            },
            StmtId(2) => Statement {
                id: StmtId(2),
                kind: Ret(
                    Some(
                        ExprId(4),
                    ),
                    Explicit,
                ),
                span: 5:30; [103, 109],
            },
            StmtId(3) => Statement {
                id: StmtId(3),
                kind: Ret(
                    Some(
                        ExprId(6),
                    ),
                    Explicit,
                ),
                span: 5:46; [119, 125],
            },
            StmtId(4) => Statement {
                id: StmtId(4),
                kind: Expression(
                    ExprId(10),
                ),
                span: 4:9; [70, 156],
            },
            StmtId(5) => Statement {
                id: StmtId(5),
                kind: LetFn(
                    Identifier {
                        id: IdentId(2),
                        span: 3:9; [46, 47],
                    },
                    [],
                    [],
                    Return {
                        type_def_id: Some(
                            TypeDefId(2),
                        ),
                    },
                    ExprId(11),
                ),
                span: 3:5; [42, 162],
            },
        ],
        type_defs: [
            TypeDefId(0) => TypeDef {
                kind: Simple(
                    [
                        IdentRefId(0),
                    ],
                ),
                span: 2:19; [19, 25],
            },
            TypeDefId(1) => TypeDef {
                kind: Simple(
                    [
                        IdentRefId(1),
                    ],
                ),
                span: 2:30; [30, 36],
            },
            TypeDefId(2) => TypeDef {
                kind: Simple(
                    [
                        IdentRefId(2),
                    ],
                ),
                span: 3:14; [51, 57],
            },
        ],
        roots: [
            StmtId(0),
        ],
    },
    [
        (
            ExprId(5),
            Output {
                exit_points: [
                    Explicit(
                        Some(
                            ExprId(4),
                        ),
                    ),
                ],
                unreachable: [],
            },
        ),
        (
            ExprId(7),
            Output {
                exit_points: [
                    Explicit(
                        Some(
                            ExprId(6),
                        ),
                    ),
                ],
                unreachable: [],
            },
        ),
        (
            ExprId(11),
            Output {
                exit_points: [
                    Explicit(
                        Some(
                            ExprId(4),
                        ),
                    ),
                    Explicit(
                        Some(
                            ExprId(6),
                        ),
                    ),
                ],
                unreachable: [
                    ExprId(9),
                ],
            },
        ),
    ],
)
