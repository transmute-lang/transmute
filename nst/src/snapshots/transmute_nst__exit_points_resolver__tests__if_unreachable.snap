---
source: nst/src/exit_points_resolver.rs
expression: "(ast, block_exit_points)"
---
(
    Ast {
        identifiers: [
            IdentId(0) => "<root>",
            IdentId(1) => "x",
            IdentId(2) => "a",
            IdentId(3) => "number",
        ],
        identifier_refs: [
            IdentRefId(0) => IdentifierRef {
                id: IdentRefId(0),
                ident: Identifier {
                    id: IdentId(3),
                    span: 2:14; [14, 20],
                },
            },
        ],
        expressions: [
            ExprId(0) => Expression {
                id: ExprId(0),
                kind: Literal(
                    Literal {
                        kind: Boolean(true),
                        span: 3:12; [37, 41],
                    },
                ),
                span: 3:12; [37, 41],
            },
            ExprId(1) => Expression {
                id: ExprId(1),
                kind: Literal(
                    Literal {
                        kind: Number(44),
                        span: 4:17; [60, 62],
                    },
                ),
                span: 4:17; [60, 62],
            },
            ExprId(2) => Expression {
                id: ExprId(2),
                kind: Literal(
                    Literal {
                        kind: Number(43),
                        span: 5:13; [76, 78],
                    },
                ),
                span: 5:13; [76, 78],
            },
            ExprId(3) => Expression {
                id: ExprId(3),
                kind: Block(
                    [
                        StmtId(1),
                        StmtId(2),
                    ],
                ),
                span: 3:17; [42, 89],
            },
            ExprId(4) => Expression {
                id: ExprId(4),
                kind: If(
                    ExprId(0),
                    ExprId(3),
                    None,
                ),
                span: 3:9; [34, 89],
            },
            ExprId(5) => Expression {
                id: ExprId(5),
                kind: Literal(
                    Literal {
                        kind: Number(44),
                        span: 7:13; [102, 104],
                    },
                ),
                span: 7:13; [102, 104],
            },
            ExprId(6) => Expression {
                id: ExprId(6),
                kind: Literal(
                    Literal {
                        kind: Number(42),
                        span: 8:9; [114, 116],
                    },
                ),
                span: 8:9; [114, 116],
            },
            ExprId(7) => Expression {
                id: ExprId(7),
                kind: Block(
                    [
                        StmtId(3),
                        StmtId(4),
                        StmtId(5),
                    ],
                ),
                span: 2:24; [24, 123],
            },
        ],
        statements: [
            StmtId(0) => Statement {
                id: StmtId(0),
                kind: Namespace(
                    Identifier {
                        id: IdentId(0),
                        span: 0:0; [0, 0],
                    },
                    InputId(0),
                    [
                        StmtId(6),
                    ],
                ),
                span: 0:0; [0, 0],
            },
            StmtId(1) => Statement {
                id: StmtId(1),
                kind: Ret(
                    Some(
                        ExprId(1),
                    ),
                    Explicit,
                ),
                span: 4:13; [56, 63],
            },
            StmtId(2) => Statement {
                id: StmtId(2),
                kind: Expression(
                    ExprId(2),
                ),
                span: 5:13; [76, 79],
            },
            StmtId(3) => Statement {
                id: StmtId(3),
                kind: Expression(
                    ExprId(4),
                ),
                span: 3:9; [34, 89],
            },
            StmtId(4) => Statement {
                id: StmtId(4),
                kind: Ret(
                    Some(
                        ExprId(5),
                    ),
                    Explicit,
                ),
                span: 7:9; [98, 105],
            },
            StmtId(5) => Statement {
                id: StmtId(5),
                kind: Expression(
                    ExprId(6),
                ),
                span: 8:9; [114, 117],
            },
            StmtId(6) => Statement {
                id: StmtId(6),
                kind: LetFn(
                    Identifier {
                        id: IdentId(1),
                        span: 2:9; [9, 10],
                    },
                    [],
                    [
                        Parameter {
                            identifier: Identifier {
                                id: IdentId(2),
                                span: 2:11; [11, 12],
                            },
                            type_def_id: TypeDefId(0),
                            span: 2:11; [11, 20],
                        },
                    ],
                    Return {
                        type_def_id: None,
                    },
                    ExprId(7),
                ),
                span: 2:5; [5, 123],
            },
        ],
        type_defs: [
            TypeDefId(0) => TypeDef {
                kind: Simple(
                    [
                        IdentRefId(0),
                    ],
                ),
                span: 2:14; [14, 20],
            },
        ],
        root: StmtId(0),
    },
    [
        (
            ExprId(3),
            Output {
                exit_points: [
                    Explicit(
                        Some(
                            ExprId(1),
                        ),
                    ),
                ],
                unreachable: [
                    ExprId(2),
                ],
            },
        ),
        (
            ExprId(7),
            Output {
                exit_points: [
                    Explicit(
                        Some(
                            ExprId(1),
                        ),
                    ),
                    Explicit(
                        Some(
                            ExprId(5),
                        ),
                    ),
                ],
                unreachable: [
                    ExprId(2),
                    ExprId(6),
                ],
            },
        ),
    ],
)
