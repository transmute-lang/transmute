---
source: ast/src/parser.rs
expression: "Parser::new(Lexer::new(\"if true { 42; } else if false { 43; } else { 44; }\")).parse()"
---
Ok(
    Ast {
        identifiers: [],
        identifier_refs: [],
        expressions: [
            ExprId(0) => Expression {
                id: ExprId(0),
                kind: Literal(
                    Literal {
                        kind: Boolean(true),
                        span: 1:4; [3, 7],
                    },
                ),
                span: 1:4; [3, 7],
            },
            ExprId(1) => Expression {
                id: ExprId(1),
                kind: Literal(
                    Literal {
                        kind: Number(42),
                        span: 1:11; [10, 12],
                    },
                ),
                span: 1:11; [10, 12],
            },
            ExprId(2) => Expression {
                id: ExprId(2),
                kind: Block(
                    [
                        StmtId(0),
                    ],
                ),
                span: 1:9; [8, 15],
            },
            ExprId(3) => Expression {
                id: ExprId(3),
                kind: Literal(
                    Literal {
                        kind: Boolean(false),
                        span: 1:25; [24, 29],
                    },
                ),
                span: 1:25; [24, 29],
            },
            ExprId(4) => Expression {
                id: ExprId(4),
                kind: Literal(
                    Literal {
                        kind: Number(43),
                        span: 1:33; [32, 34],
                    },
                ),
                span: 1:33; [32, 34],
            },
            ExprId(5) => Expression {
                id: ExprId(5),
                kind: Block(
                    [
                        StmtId(1),
                    ],
                ),
                span: 1:31; [30, 37],
            },
            ExprId(6) => Expression {
                id: ExprId(6),
                kind: Literal(
                    Literal {
                        kind: Number(44),
                        span: 1:46; [45, 47],
                    },
                ),
                span: 1:46; [45, 47],
            },
            ExprId(7) => Expression {
                id: ExprId(7),
                kind: Block(
                    [
                        StmtId(2),
                    ],
                ),
                span: 1:44; [43, 50],
            },
            ExprId(8) => Expression {
                id: ExprId(8),
                kind: If(
                    ExprId(3),
                    ExprId(5),
                    Some(
                        ExprId(7),
                    ),
                ),
                span: 1:22; [21, 50],
            },
            ExprId(9) => Expression {
                id: ExprId(9),
                kind: Block(
                    [
                        StmtId(3),
                    ],
                ),
                span: 1:22; [21, 50],
            },
            ExprId(10) => Expression {
                id: ExprId(10),
                kind: If(
                    ExprId(0),
                    ExprId(2),
                    Some(
                        ExprId(9),
                    ),
                ),
                span: 1:1; [0, 50],
            },
        ],
        statements: [
            StmtId(0) => Statement {
                id: StmtId(0),
                kind: Expression(
                    ExprId(1),
                ),
                span: 1:11; [10, 13],
            },
            StmtId(1) => Statement {
                id: StmtId(1),
                kind: Expression(
                    ExprId(4),
                ),
                span: 1:33; [32, 35],
            },
            StmtId(2) => Statement {
                id: StmtId(2),
                kind: Expression(
                    ExprId(6),
                ),
                span: 1:46; [45, 48],
            },
            StmtId(3) => Statement {
                id: StmtId(3),
                kind: Expression(
                    ExprId(8),
                ),
                span: 1:22; [21, 50],
            },
            StmtId(4) => Statement {
                id: StmtId(4),
                kind: Expression(
                    ExprId(10),
                ),
                span: 1:1; [0, 50],
            },
        ],
        roots: [
            StmtId(4),
        ],
    },
)
