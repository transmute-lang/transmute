---
source: ast/src/parser.rs
expression: compilation_unit.into_ast()
---
Ok(
    Ast {
        identifiers: [
            IdentId(0) => "<root>",
            IdentId(1) => "times_two",
            IdentId(2) => "a",
            IdentId(3) => "number",
        ],
        identifier_refs: [
            IdentRefId(0) => IdentifierRef {
                id: IdentRefId(0),
                ident: Identifier {
                    id: IdentId(3),
                    span: 1:18; [17, 23],
                },
            },
            IdentRefId(1) => IdentifierRef {
                id: IdentRefId(1),
                ident: Identifier {
                    id: IdentId(3),
                    span: 1:27; [26, 32],
                },
            },
            IdentRefId(2) => IdentifierRef {
                id: IdentRefId(2),
                ident: Identifier {
                    id: IdentId(2),
                    span: 1:36; [35, 36],
                },
            },
        ],
        expressions: [
            ExprId(0) => Expression {
                id: ExprId(0),
                kind: Literal(
                    Literal {
                        kind: IdentRefId(2),
                        span: 1:36; [35, 36],
                    },
                ),
                span: 1:36; [35, 36],
            },
            ExprId(1) => Expression {
                id: ExprId(1),
                kind: Literal(
                    Literal {
                        kind: Number(2),
                        span: 1:40; [39, 40],
                    },
                ),
                span: 1:40; [39, 40],
            },
            ExprId(2) => Expression {
                id: ExprId(2),
                kind: Binary(
                    ExprId(0),
                    BinaryOperator {
                        kind: Multiplication,
                        span: 1:38; [37, 38],
                    },
                    ExprId(1),
                ),
                span: 1:36; [35, 40],
            },
            ExprId(3) => Expression {
                id: ExprId(3),
                kind: Block(
                    [
                        StmtId(1),
                    ],
                ),
                span: 1:36; [35, 41],
            },
        ],
        statements: [
            StmtId(0) => Statement {
                id: StmtId(0),
                kind: Namespace(
                    Identifier {
                        id: IdentId(0),
                        span: 0:0; [0, 0],
                    },
                    InputId(0),
                    [
                        StmtId(2),
                    ],
                ),
                span: 0:0; [0, 0],
            },
            StmtId(1) => Statement {
                id: StmtId(1),
                kind: Expression(
                    ExprId(2),
                ),
                span: 1:36; [35, 41],
            },
            StmtId(2) => Statement {
                id: StmtId(2),
                kind: LetFn(
                    Identifier {
                        id: IdentId(1),
                        span: 1:5; [4, 13],
                    },
                    [],
                    [
                        Parameter {
                            identifier: Identifier {
                                id: IdentId(2),
                                span: 1:15; [14, 15],
                            },
                            type_def_id: TypeDefId(0),
                            span: 1:15; [14, 23],
                        },
                    ],
                    Return {
                        type_def_id: Some(
                            TypeDefId(1),
                        ),
                    },
                    ExprId(3),
                ),
                span: 1:1; [0, 41],
            },
        ],
        type_defs: [
            TypeDefId(0) => TypeDef {
                kind: Simple(
                    [
                        IdentRefId(0),
                    ],
                ),
                span: 1:18; [17, 23],
            },
            TypeDefId(1) => TypeDef {
                kind: Simple(
                    [
                        IdentRefId(1),
                    ],
                ),
                span: 1:27; [26, 32],
            },
        ],
        root: StmtId(0),
    },
)
