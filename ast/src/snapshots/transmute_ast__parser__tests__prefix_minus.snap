---
source: ast/src/parser.rs
expression: "Parser::new(Lexer::new(\"- 40 * 2;\")).parse()"
---
Ok(
    Ast {
        identifiers: [],
        identifier_refs: [],
        expressions: [
            ExprId(0) => Expression {
                id: ExprId(0),
                kind: Literal(
                    Literal {
                        kind: Number(40),
                        span: 1:3; [2, 4],
                    },
                ),
                span: 1:3; [2, 4],
            },
            ExprId(1) => Expression {
                id: ExprId(1),
                kind: Unary(
                    UnaryOperator {
                        kind: Minus,
                        span: 1:1; [0, 1],
                    },
                    ExprId(0),
                ),
                span: 1:1; [0, 4],
            },
            ExprId(2) => Expression {
                id: ExprId(2),
                kind: Literal(
                    Literal {
                        kind: Number(2),
                        span: 1:8; [7, 8],
                    },
                ),
                span: 1:8; [7, 8],
            },
            ExprId(3) => Expression {
                id: ExprId(3),
                kind: Binary(
                    ExprId(1),
                    BinaryOperator {
                        kind: Multiplication,
                        span: 1:6; [5, 6],
                    },
                    ExprId(2),
                ),
                span: 1:1; [0, 8],
            },
        ],
        statements: [
            StmtId(0) => Statement {
                id: StmtId(0),
                kind: Expression(
                    ExprId(3),
                ),
                span: 1:1; [0, 9],
            },
        ],
        roots: [
            StmtId(0),
        ],
    },
)
