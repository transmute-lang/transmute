---
source: ast/src/parser.rs
expression: "Parser::new(Lexer::new(\"2 + 20 * 2;\")).parse()"
---
Ok(
    Ast {
        identifiers: [],
        identifier_refs: [],
        expressions: [
            ExprId(0) => Expression {
                id: ExprId(0),
                kind: Literal(
                    Literal {
                        kind: Number(2),
                        span: 1:1; [0, 1],
                    },
                ),
                span: 1:1; [0, 1],
            },
            ExprId(1) => Expression {
                id: ExprId(1),
                kind: Literal(
                    Literal {
                        kind: Number(20),
                        span: 1:5; [4, 6],
                    },
                ),
                span: 1:5; [4, 6],
            },
            ExprId(2) => Expression {
                id: ExprId(2),
                kind: Literal(
                    Literal {
                        kind: Number(2),
                        span: 1:10; [9, 10],
                    },
                ),
                span: 1:10; [9, 10],
            },
            ExprId(3) => Expression {
                id: ExprId(3),
                kind: Binary(
                    ExprId(1),
                    BinaryOperator {
                        kind: Multiplication,
                        span: 1:8; [7, 8],
                    },
                    ExprId(2),
                ),
                span: 1:5; [4, 10],
            },
            ExprId(4) => Expression {
                id: ExprId(4),
                kind: Binary(
                    ExprId(0),
                    BinaryOperator {
                        kind: Addition,
                        span: 1:3; [2, 3],
                    },
                    ExprId(3),
                ),
                span: 1:1; [0, 10],
            },
        ],
        statements: [
            StmtId(0) => Statement {
                id: StmtId(0),
                kind: Expression(
                    ExprId(4),
                ),
                span: 1:1; [0, 11],
            },
        ],
        roots: [
            StmtId(0),
        ],
    },
)
