---
source: ast/src/parser.rs
expression: compilation_unit.into_ast()
---
Ok(
    Ast {
        identifiers: [
            IdentId(0) => "<root>",
            IdentId(1) => "a",
            IdentId(2) => "b",
        ],
        identifier_refs: [
            IdentRefId(0) => IdentifierRef {
                id: IdentRefId(0),
                ident: Identifier {
                    id: IdentId(1),
                    span: 1:1; [0, 1],
                },
            },
            IdentRefId(1) => IdentifierRef {
                id: IdentRefId(1),
                ident: Identifier {
                    id: IdentId(2),
                    span: 1:3; [2, 3],
                },
            },
        ],
        expressions: [
            ExprId(0) => Expression {
                id: ExprId(0),
                kind: Literal(
                    Literal {
                        kind: IdentRefId(0),
                        span: 1:1; [0, 1],
                    },
                ),
                span: 1:1; [0, 1],
            },
            ExprId(1) => Expression {
                id: ExprId(1),
                kind: Access(
                    ExprId(0),
                    IdentRefId(1),
                ),
                span: 1:1; [0, 3],
            },
            ExprId(2) => Expression {
                id: ExprId(2),
                kind: Literal(
                    Literal {
                        kind: Number(0),
                        span: 1:5; [4, 5],
                    },
                ),
                span: 1:5; [4, 5],
            },
            ExprId(3) => Expression {
                id: ExprId(3),
                kind: ArrayAccess(
                    ExprId(1),
                    ExprId(2),
                ),
                span: 1:4; [3, 6],
            },
        ],
        statements: [
            StmtId(0) => Statement {
                id: StmtId(0),
                kind: Namespace(
                    Identifier {
                        id: IdentId(0),
                        span: 0:0; [0, 0],
                    },
                    InputId(0),
                    [
                        StmtId(1),
                    ],
                ),
                span: 0:0; [0, 0],
            },
            StmtId(1) => Statement {
                id: StmtId(1),
                kind: Expression(
                    ExprId(3),
                ),
                span: 1:4; [3, 7],
            },
        ],
        type_defs: [],
        root: StmtId(0),
    },
)
