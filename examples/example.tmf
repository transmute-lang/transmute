#!/bin/transmute

/*
method call:
  - value | method        <=> method(value)
  - method(param1, param2) => &0=param1, &1=param2
  - method(param=value)    => &param=value (if ...)
*/

fn main(username) {
    let empty = "";
    let sqlite = sql.dataSource("sqlite:///db.sqlite");

    match http.get("/users/{{username}}") {
        in.status != 200                                => { fail "error fetching data"; },
//fix   in.headers["content-type"] ~ "application/json" => { json.from(.body.text) or fail "not json"; },
//fix   in.headers["content-type"] ~ "text/plain"       => { json.from("{ username: &1 }", in.body.text); },
//fix   _                                               => { fail "not json" },
    }
    match in {
        dummy => {},
//fix   in.username == null or in.username == empty => { fail "no username found" },
//fix   _                                           => continue,
    }
    fork {
        dummy => {},
//fix   in.username | text.lower as username
//fix   in.username | fetchPosts as posts or fail "error fetching posts: {err}"
    }
    join {
        let x = 1;
//Fix   json.from("{ username: &username, posts: &posts }", username=username, posts=posts);
    }
}

fn fetchPosts(username) {
    let query = """;
        select title, text
        from post
        where username={username};;

    match sqlite.query(query) {
        // result.error == true =>
        error => { fail "unable to fetch posts from database for user {username}: {err}"; },
        // _ => result.row
//fix    _     => row | split("|") | json.from("{ title: &0, text: &1 }")
        // ==> split("|")(row) <==> split("|", row)
    }
}
