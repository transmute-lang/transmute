---
source: llvm/src/lib.rs
expression: llvm_ir
---
; ModuleID = 'main'
source_filename = "main"

%"StructInner#id1" = type {}
%"StructOuter#id0" = type { ptr }

@layout_s11StructOuter = global [4 x i64] [i64 0, i64 1, i64 0, i64 ptrtoint (ptr @layout_s11StructInner to i64)]
@layout_s11StructInner = global [2 x i64] zeroinitializer

; Function Attrs: nounwind
declare void @llvm.gcroot(ptr, ptr) #0

declare ptr @gc_malloc(i64, i64)

declare void @gc_run()

declare void @tmc_check_array_index(i64, i64, i64, i64)

declare void @_TM0_5print1n(i64)

declare void @_TM0_5print1b(i1)

define private void @_glob() {
entry:
  unreachable
}

define i64 @_TM0_1f0() gc "shadow-stack" {
entry:
  %"gcroot#heap#struct#StructInner#id1#" = alloca ptr, align 8
  store ptr null, ptr %"gcroot#heap#struct#StructInner#id1#", align 8
  call void @llvm.gcroot(ptr %"gcroot#heap#struct#StructInner#id1#", ptr @layout_s11StructInner)
  %"outer#local#sym23#" = alloca ptr, align 8
  store ptr null, ptr %"outer#local#sym23#", align 8
  call void @llvm.gcroot(ptr %"outer#local#sym23#", ptr @layout_s11StructOuter)
  %"heap#struct#StructInner#id1#" = call ptr @gc_malloc(i64 ptrtoint (ptr getelementptr (%"StructInner#id1", ptr null, i32 1) to i64), i64 ptrtoint (ptr getelementptr ({ i1, %"StructInner#id1" }, ptr null, i64 0, i32 1) to i64))
  store ptr %"heap#struct#StructInner#id1#", ptr %"gcroot#heap#struct#StructInner#id1#", align 8
  %"heap#struct#StructOuter#id0#" = call ptr @gc_malloc(i64 ptrtoint (ptr getelementptr (%"StructOuter#id0", ptr null, i32 1) to i64), i64 ptrtoint (ptr getelementptr ({ i1, %"StructOuter#id0" }, ptr null, i64 0, i32 1) to i64))
  %"heap#struct#StructOuter#id0#.inner#idx0#sym22" = getelementptr inbounds %"StructOuter#id0", ptr %"heap#struct#StructOuter#id0#", i32 0, i32 0
  store ptr %"heap#struct#StructInner#id1#", ptr %"heap#struct#StructOuter#id0#.inner#idx0#sym22", align 8
  store ptr %"heap#struct#StructOuter#id0#", ptr %"outer#local#sym23#", align 8
  call void @gc_run()
  ret i64 1
}

attributes #0 = { nounwind }
