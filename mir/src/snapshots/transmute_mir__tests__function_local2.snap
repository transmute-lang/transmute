---
source: mir/src/lib.rs
expression: make_mir(hir)
---
Ok(
    Mir {
        functions: [
            Function {
                identifier: Identifier {
                    id: IdentId(0),
                    span: 1:5; [4, 5],
                },
                symbol_id: SymbolId(18),
                parameters: [],
                variables: {
                    SymbolId(19): Variable {
                        identifier: Identifier {
                            id: IdentId(1),
                            span: 1:15; [14, 15],
                        },
                        symbol_id: SymbolId(19),
                        type_id: TypeId(4),
                        expression: ExprId(0),
                        mutable: false,
                    },
                    SymbolId(20): Variable {
                        identifier: Identifier {
                            id: IdentId(2),
                            span: 1:26; [25, 26],
                        },
                        symbol_id: SymbolId(20),
                        type_id: TypeId(4),
                        expression: ExprId(1),
                        mutable: false,
                    },
                },
                body: ExprId(2),
                ret: TypeId(1),
            },
        ],
        structs: [],
        identifiers: [
            "f",
            "a",
            "b",
            "add",
            "boolean",
            "div",
            "eq",
            "ge",
            "gt",
            "le",
            "lt",
            "mul",
            "neg",
            "neq",
            "number",
            "print",
            "sub",
            "void",
        ],
        expressions: [
            Expression {
                id: ExprId(0),
                kind: Literal(
                    Literal {
                        kind: Number(
                            0,
                        ),
                        span: 1:19; [18, 19],
                    },
                ),
                span: 1:19; [18, 19],
                type_id: TypeId(4),
            },
            Expression {
                id: ExprId(1),
                kind: Literal(
                    Literal {
                        kind: Number(
                            1,
                        ),
                        span: 1:30; [29, 30],
                    },
                ),
                span: 1:30; [29, 30],
                type_id: TypeId(4),
            },
            Expression {
                id: ExprId(2),
                kind: Block(
                    [],
                ),
                span: 1:9; [8, 34],
                type_id: TypeId(1),
            },
        ],
        statements: [],
        symbols: [
            Symbol {
                id: SymbolId(1),
                kind: NativeType(
                    IdentId(17),
                    Void,
                ),
                type_id: TypeId(2),
                ident_id: IdentId(17),
            },
            Symbol {
                id: SymbolId(2),
                kind: NativeType(
                    IdentId(14),
                    Number,
                ),
                type_id: TypeId(2),
                ident_id: IdentId(14),
            },
            Symbol {
                id: SymbolId(3),
                kind: NativeType(
                    IdentId(4),
                    Boolean,
                ),
                type_id: TypeId(2),
                ident_id: IdentId(4),
            },
            Symbol {
                id: SymbolId(4),
                kind: Native(
                    IdentId(16),
                    [
                        TypeId(4),
                        TypeId(4),
                    ],
                    TypeId(4),
                    SubNumberNumber,
                ),
                type_id: TypeId(5),
                ident_id: IdentId(16),
            },
            Symbol {
                id: SymbolId(5),
                kind: Native(
                    IdentId(15),
                    [
                        TypeId(4),
                    ],
                    TypeId(1),
                    PrintNumber,
                ),
                type_id: TypeId(6),
                ident_id: IdentId(15),
            },
            Symbol {
                id: SymbolId(6),
                kind: Native(
                    IdentId(13),
                    [
                        TypeId(4),
                        TypeId(4),
                    ],
                    TypeId(3),
                    NeqNumberNumber,
                ),
                type_id: TypeId(7),
                ident_id: IdentId(13),
            },
            Symbol {
                id: SymbolId(7),
                kind: Native(
                    IdentId(13),
                    [
                        TypeId(3),
                        TypeId(3),
                    ],
                    TypeId(3),
                    NeqBooleanBoolean,
                ),
                type_id: TypeId(8),
                ident_id: IdentId(13),
            },
            Symbol {
                id: SymbolId(8),
                kind: Native(
                    IdentId(12),
                    [
                        TypeId(4),
                    ],
                    TypeId(4),
                    NegNumber,
                ),
                type_id: TypeId(9),
                ident_id: IdentId(12),
            },
            Symbol {
                id: SymbolId(9),
                kind: Native(
                    IdentId(11),
                    [
                        TypeId(4),
                        TypeId(4),
                    ],
                    TypeId(4),
                    MulNumberNumber,
                ),
                type_id: TypeId(5),
                ident_id: IdentId(11),
            },
            Symbol {
                id: SymbolId(10),
                kind: Native(
                    IdentId(10),
                    [
                        TypeId(4),
                        TypeId(4),
                    ],
                    TypeId(3),
                    LtNumberNumber,
                ),
                type_id: TypeId(7),
                ident_id: IdentId(10),
            },
            Symbol {
                id: SymbolId(11),
                kind: Native(
                    IdentId(9),
                    [
                        TypeId(4),
                        TypeId(4),
                    ],
                    TypeId(3),
                    LeNumberNumber,
                ),
                type_id: TypeId(7),
                ident_id: IdentId(9),
            },
            Symbol {
                id: SymbolId(12),
                kind: Native(
                    IdentId(8),
                    [
                        TypeId(4),
                        TypeId(4),
                    ],
                    TypeId(3),
                    GtNumberNumber,
                ),
                type_id: TypeId(7),
                ident_id: IdentId(8),
            },
            Symbol {
                id: SymbolId(13),
                kind: Native(
                    IdentId(7),
                    [
                        TypeId(4),
                        TypeId(4),
                    ],
                    TypeId(3),
                    GeNumberNumber,
                ),
                type_id: TypeId(7),
                ident_id: IdentId(7),
            },
            Symbol {
                id: SymbolId(14),
                kind: Native(
                    IdentId(6),
                    [
                        TypeId(4),
                        TypeId(4),
                    ],
                    TypeId(3),
                    EqNumberNumber,
                ),
                type_id: TypeId(7),
                ident_id: IdentId(6),
            },
            Symbol {
                id: SymbolId(15),
                kind: Native(
                    IdentId(6),
                    [
                        TypeId(3),
                        TypeId(3),
                    ],
                    TypeId(3),
                    EqBooleanBoolean,
                ),
                type_id: TypeId(8),
                ident_id: IdentId(6),
            },
            Symbol {
                id: SymbolId(16),
                kind: Native(
                    IdentId(5),
                    [
                        TypeId(4),
                        TypeId(4),
                    ],
                    TypeId(4),
                    DivNumberNumber,
                ),
                type_id: TypeId(5),
                ident_id: IdentId(5),
            },
            Symbol {
                id: SymbolId(17),
                kind: Native(
                    IdentId(3),
                    [
                        TypeId(4),
                        TypeId(4),
                    ],
                    TypeId(4),
                    AddNumberNumber,
                ),
                type_id: TypeId(5),
                ident_id: IdentId(3),
            },
            Symbol {
                id: SymbolId(18),
                kind: LetFn(
                    StmtId(2),
                    [],
                    TypeId(1),
                ),
                type_id: TypeId(10),
                ident_id: IdentId(0),
            },
            Symbol {
                id: SymbolId(19),
                kind: Let(
                    StmtId(0),
                ),
                type_id: TypeId(4),
                ident_id: IdentId(1),
            },
            Symbol {
                id: SymbolId(20),
                kind: Let(
                    StmtId(1),
                ),
                type_id: TypeId(4),
                ident_id: IdentId(2),
            },
        ],
        types: [
            Void,
            None,
            Boolean,
            Number,
            Function(
                [
                    TypeId(4),
                    TypeId(4),
                ],
                TypeId(4),
            ),
            Function(
                [
                    TypeId(4),
                ],
                TypeId(1),
            ),
            Function(
                [
                    TypeId(4),
                    TypeId(4),
                ],
                TypeId(3),
            ),
            Function(
                [
                    TypeId(3),
                    TypeId(3),
                ],
                TypeId(3),
            ),
            Function(
                [
                    TypeId(4),
                ],
                TypeId(4),
            ),
            Function(
                [],
                TypeId(1),
            ),
        ],
    },
)
