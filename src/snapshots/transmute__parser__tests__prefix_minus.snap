---
source: src/parser.rs
expression: "Parser::new(Lexer::new(\"- 40 * 2\")).parse()"
---
(
    Ast {
        identifiers: [],
        identifier_refs: [],
        expressions: [
            Expression {
                id: ExprId {
                    id: 0,
                },
                kind: Literal(
                    Literal {
                        kind: Number(
                            40,
                        ),
                        span: 1:3; [2, 4],
                    },
                ),
                span: 1:3; [2, 4],
            },
            Expression {
                id: ExprId {
                    id: 1,
                },
                kind: Unary(
                    UnaryOperator {
                        kind: Minus,
                        span: 1:1; [0, 1],
                    },
                    ExprId {
                        id: 0,
                    },
                ),
                span: 1:1; [0, 4],
            },
            Expression {
                id: ExprId {
                    id: 2,
                },
                kind: Literal(
                    Literal {
                        kind: Number(
                            2,
                        ),
                        span: 1:8; [7, 8],
                    },
                ),
                span: 1:8; [7, 8],
            },
            Expression {
                id: ExprId {
                    id: 3,
                },
                kind: Binary(
                    ExprId {
                        id: 1,
                    },
                    BinaryOperator {
                        kind: Multiplication,
                        span: 1:6; [5, 6],
                    },
                    ExprId {
                        id: 2,
                    },
                ),
                span: 1:1; [0, 8],
            },
        ],
        statements: [
            Statement {
                id: StmtId {
                    id: 0,
                },
                kind: Expression(
                    ExprId {
                        id: 3,
                    },
                ),
                span: 1:1; [0, 8],
            },
        ],
        root: [
            StmtId {
                id: 0,
            },
        ],
    },
    Diagnostics {
        diagnostics: [
            Diagnostic {
                message: "Unexpected `eof`, expected one of `;`, `*`, `/`, `-`, `+`, `==`, `!=`, `>`, `>=`, `<`, `<=`",
                span: 1:9; [8, 8],
                level: Error,
                generated_at: (
                    "src/parser.rs",
                    932,
                ),
            },
        ],
    },
)
