---
source: src/parser.rs
expression: "Parser::new(Lexer::new(\"if true { 42; } else if false { 43; } else { 44; }\")).parse()"
---
(
    Ast {
        identifiers: [],
        identifier_refs: [],
        expressions: [
            Expression {
                id: ExprId {
                    id: 0,
                },
                kind: Literal(
                    Literal {
                        kind: Boolean(
                            true,
                        ),
                        span: 1:4; [3, 7],
                    },
                ),
                span: 1:4; [3, 7],
            },
            Expression {
                id: ExprId {
                    id: 1,
                },
                kind: Literal(
                    Literal {
                        kind: Number(
                            42,
                        ),
                        span: 1:11; [10, 12],
                    },
                ),
                span: 1:11; [10, 12],
            },
            Expression {
                id: ExprId {
                    id: 2,
                },
                kind: Block(
                    [
                        StmtId {
                            id: 0,
                        },
                    ],
                ),
                span: 1:9; [8, 15],
            },
            Expression {
                id: ExprId {
                    id: 3,
                },
                kind: Literal(
                    Literal {
                        kind: Boolean(
                            false,
                        ),
                        span: 1:25; [24, 29],
                    },
                ),
                span: 1:25; [24, 29],
            },
            Expression {
                id: ExprId {
                    id: 4,
                },
                kind: Literal(
                    Literal {
                        kind: Number(
                            43,
                        ),
                        span: 1:33; [32, 34],
                    },
                ),
                span: 1:33; [32, 34],
            },
            Expression {
                id: ExprId {
                    id: 5,
                },
                kind: Block(
                    [
                        StmtId {
                            id: 1,
                        },
                    ],
                ),
                span: 1:31; [30, 37],
            },
            Expression {
                id: ExprId {
                    id: 6,
                },
                kind: Literal(
                    Literal {
                        kind: Number(
                            44,
                        ),
                        span: 1:46; [45, 47],
                    },
                ),
                span: 1:46; [45, 47],
            },
            Expression {
                id: ExprId {
                    id: 7,
                },
                kind: Block(
                    [
                        StmtId {
                            id: 2,
                        },
                    ],
                ),
                span: 1:44; [43, 50],
            },
            Expression {
                id: ExprId {
                    id: 8,
                },
                kind: If(
                    ExprId {
                        id: 3,
                    },
                    ExprId {
                        id: 5,
                    },
                    Some(
                        ExprId {
                            id: 7,
                        },
                    ),
                ),
                span: 1:22; [21, 50],
            },
            Expression {
                id: ExprId {
                    id: 9,
                },
                kind: Block(
                    [
                        StmtId {
                            id: 3,
                        },
                    ],
                ),
                span: 1:22; [21, 50],
            },
            Expression {
                id: ExprId {
                    id: 10,
                },
                kind: If(
                    ExprId {
                        id: 0,
                    },
                    ExprId {
                        id: 2,
                    },
                    Some(
                        ExprId {
                            id: 9,
                        },
                    ),
                ),
                span: 1:1; [0, 50],
            },
        ],
        statements: [
            Statement {
                id: StmtId {
                    id: 0,
                },
                kind: Expression(
                    ExprId {
                        id: 1,
                    },
                ),
                span: 1:11; [10, 13],
            },
            Statement {
                id: StmtId {
                    id: 1,
                },
                kind: Expression(
                    ExprId {
                        id: 4,
                    },
                ),
                span: 1:33; [32, 35],
            },
            Statement {
                id: StmtId {
                    id: 2,
                },
                kind: Expression(
                    ExprId {
                        id: 6,
                    },
                ),
                span: 1:46; [45, 48],
            },
            Statement {
                id: StmtId {
                    id: 3,
                },
                kind: Expression(
                    ExprId {
                        id: 8,
                    },
                ),
                span: 1:22; [21, 50],
            },
            Statement {
                id: StmtId {
                    id: 4,
                },
                kind: Expression(
                    ExprId {
                        id: 10,
                    },
                ),
                span: 1:1; [0, 50],
            },
        ],
        root: [
            StmtId {
                id: 4,
            },
        ],
        implicit_ret: PhantomData<transmute::ast::WithImplicitRet>,
    },
    Diagnostics {
        diagnostics: [],
    },
)
