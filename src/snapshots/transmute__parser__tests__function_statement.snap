---
source: src/parser.rs
expression: "Parser::new(Lexer::new(\"let times_two(a: number) = a * 2;\")).parse()"
---
Ok(
    Ast {
        identifiers: [
            "times_two",
            "a",
            "number",
        ],
        identifier_refs: [
            IdentifierRef {
                id: IdentRefId {
                    id: 0,
                },
                ident: Identifier {
                    id: IdentId {
                        id: 1,
                    },
                    span: 1:28; [27, 28],
                },
                bound_state: Unbound,
            },
        ],
        expressions: [
            Expression {
                id: ExprId {
                    id: 0,
                },
                kind: Literal(
                    Literal {
                        kind: Identifier(
                            IdentRefId {
                                id: 0,
                            },
                        ),
                        span: 1:28; [27, 28],
                    },
                ),
                span: 1:28; [27, 28],
                typed_state: Untyped,
            },
            Expression {
                id: ExprId {
                    id: 1,
                },
                kind: Literal(
                    Literal {
                        kind: Number(
                            2,
                        ),
                        span: 1:32; [31, 32],
                    },
                ),
                span: 1:32; [31, 32],
                typed_state: Untyped,
            },
            Expression {
                id: ExprId {
                    id: 2,
                },
                kind: Binary(
                    ExprId {
                        id: 0,
                    },
                    BinaryOperator {
                        kind: Multiplication,
                        span: 1:30; [29, 30],
                    },
                    ExprId {
                        id: 1,
                    },
                ),
                span: 1:28; [27, 32],
                typed_state: Untyped,
            },
            Expression {
                id: ExprId {
                    id: 3,
                },
                kind: Block(
                    [
                        StmtId {
                            id: 0,
                        },
                    ],
                ),
                span: 1:28; [27, 33],
                typed_state: Untyped,
            },
        ],
        statements: [
            Statement {
                id: StmtId {
                    id: 0,
                },
                kind: Expression(
                    ExprId {
                        id: 2,
                    },
                ),
                span: 1:28; [27, 33],
            },
            Statement {
                id: StmtId {
                    id: 1,
                },
                kind: LetFn(
                    Identifier {
                        id: IdentId {
                            id: 0,
                        },
                        span: 1:5; [4, 13],
                    },
                    [
                        Parameter {
                            identifier: Identifier {
                                id: IdentId {
                                    id: 1,
                                },
                                span: 1:15; [14, 15],
                            },
                            ty: Identifier {
                                id: IdentId {
                                    id: 2,
                                },
                                span: 1:18; [17, 23],
                            },
                            span: 1:15; [14, 23],
                            state: Unbound,
                        },
                    ],
                    Return {
                        ret: None,
                    },
                    ExprId {
                        id: 3,
                    },
                ),
                span: 1:1; [0, 33],
            },
        ],
        root: [
            StmtId {
                id: 1,
            },
        ],
        symbols: [],
        types: [],
        implicit_ret: PhantomData<transmute::ast::WithImplicitRet>,
    },
)
