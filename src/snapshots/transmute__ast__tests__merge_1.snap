---
source: src/ast.rs
expression: "&ast1.merge(ast2)"
---
Ast {
    identifiers: [
        "x_1",
        "f_1",
        "p_1",
        "number",
        "boolean",
        "x_2",
        "f_2",
        "p_2",
    ],
    identifier_refs: [
        IdentifierRef {
            id: IdentRefId {
                id: 0,
            },
            ident: Identifier {
                id: IdentId {
                    id: 2,
                },
                span: 1:48; [47, 50],
            },
            bound_state: Unbound,
        },
        IdentifierRef {
            id: IdentRefId {
                id: 1,
            },
            ident: Identifier {
                id: IdentId {
                    id: 0,
                },
                span: 1:64; [63, 66],
            },
            bound_state: Unbound,
        },
        IdentifierRef {
            id: IdentRefId {
                id: 2,
            },
            ident: Identifier {
                id: IdentId {
                    id: 1,
                },
                span: 1:60; [59, 62],
            },
            bound_state: Unbound,
        },
        IdentifierRef {
            id: IdentRefId {
                id: 3,
            },
            ident: Identifier {
                id: IdentId {
                    id: 7,
                },
                span: 1:48; [47, 50],
            },
            bound_state: Unbound,
        },
        IdentifierRef {
            id: IdentRefId {
                id: 4,
            },
            ident: Identifier {
                id: IdentId {
                    id: 5,
                },
                span: 1:64; [63, 66],
            },
            bound_state: Unbound,
        },
        IdentifierRef {
            id: IdentRefId {
                id: 5,
            },
            ident: Identifier {
                id: IdentId {
                    id: 6,
                },
                span: 1:60; [59, 62],
            },
            bound_state: Unbound,
        },
    ],
    expressions: [
        Expression {
            id: ExprId {
                id: 0,
            },
            kind: Literal(
                Literal {
                    kind: Number(
                        0,
                    ),
                    span: 1:11; [10, 11],
                },
            ),
            span: 1:11; [10, 11],
            typed_state: Untyped,
        },
        Expression {
            id: ExprId {
                id: 1,
            },
            kind: Literal(
                Literal {
                    kind: Identifier(
                        IdentRefId {
                            id: 0,
                        },
                    ),
                    span: 1:48; [47, 50],
                },
            ),
            span: 1:48; [47, 50],
            typed_state: Untyped,
        },
        Expression {
            id: ExprId {
                id: 2,
            },
            kind: Literal(
                Literal {
                    kind: Number(
                        1,
                    ),
                    span: 1:55; [54, 55],
                },
            ),
            span: 1:55; [54, 55],
            typed_state: Untyped,
        },
        Expression {
            id: ExprId {
                id: 3,
            },
            kind: Binary(
                ExprId {
                    id: 1,
                },
                BinaryOperator {
                    kind: Equality,
                    span: 1:52; [51, 53],
                },
                ExprId {
                    id: 2,
                },
            ),
            span: 1:48; [47, 55],
            typed_state: Untyped,
        },
        Expression {
            id: ExprId {
                id: 4,
            },
            kind: Block(
                [
                    StmtId {
                        id: 1,
                    },
                ],
            ),
            span: 1:46; [45, 58],
            typed_state: Untyped,
        },
        Expression {
            id: ExprId {
                id: 5,
            },
            kind: Literal(
                Literal {
                    kind: Identifier(
                        IdentRefId {
                            id: 1,
                        },
                    ),
                    span: 1:64; [63, 66],
                },
            ),
            span: 1:64; [63, 66],
            typed_state: Untyped,
        },
        Expression {
            id: ExprId {
                id: 6,
            },
            kind: FunctionCall(
                IdentRefId {
                    id: 2,
                },
                [
                    ExprId {
                        id: 5,
                    },
                ],
            ),
            span: 1:60; [59, 67],
            typed_state: Untyped,
        },
        Expression {
            id: ExprId {
                id: 7,
            },
            kind: Literal(
                Literal {
                    kind: Number(
                        0,
                    ),
                    span: 1:11; [10, 11],
                },
            ),
            span: 1:11; [10, 11],
            typed_state: Untyped,
        },
        Expression {
            id: ExprId {
                id: 8,
            },
            kind: Literal(
                Literal {
                    kind: Identifier(
                        IdentRefId {
                            id: 3,
                        },
                    ),
                    span: 1:48; [47, 50],
                },
            ),
            span: 1:48; [47, 50],
            typed_state: Untyped,
        },
        Expression {
            id: ExprId {
                id: 9,
            },
            kind: Literal(
                Literal {
                    kind: Number(
                        2,
                    ),
                    span: 1:55; [54, 55],
                },
            ),
            span: 1:55; [54, 55],
            typed_state: Untyped,
        },
        Expression {
            id: ExprId {
                id: 10,
            },
            kind: Binary(
                ExprId {
                    id: 8,
                },
                BinaryOperator {
                    kind: Equality,
                    span: 1:52; [51, 53],
                },
                ExprId {
                    id: 9,
                },
            ),
            span: 1:48; [47, 55],
            typed_state: Untyped,
        },
        Expression {
            id: ExprId {
                id: 11,
            },
            kind: Block(
                [
                    StmtId {
                        id: 5,
                    },
                ],
            ),
            span: 1:46; [45, 58],
            typed_state: Untyped,
        },
        Expression {
            id: ExprId {
                id: 12,
            },
            kind: Literal(
                Literal {
                    kind: Identifier(
                        IdentRefId {
                            id: 4,
                        },
                    ),
                    span: 1:64; [63, 66],
                },
            ),
            span: 1:64; [63, 66],
            typed_state: Untyped,
        },
        Expression {
            id: ExprId {
                id: 13,
            },
            kind: FunctionCall(
                IdentRefId {
                    id: 5,
                },
                [
                    ExprId {
                        id: 12,
                    },
                ],
            ),
            span: 1:60; [59, 67],
            typed_state: Untyped,
        },
    ],
    statements: [
        Statement {
            id: StmtId {
                id: 0,
            },
            kind: Let(
                Identifier {
                    id: IdentId {
                        id: 0,
                    },
                    span: 1:5; [4, 7],
                },
                ExprId {
                    id: 0,
                },
            ),
            span: 1:1; [0, 12],
        },
        Statement {
            id: StmtId {
                id: 1,
            },
            kind: Ret(
                ExprId {
                    id: 3,
                },
                Implicit,
            ),
            span: 1:48; [47, 56],
        },
        Statement {
            id: StmtId {
                id: 2,
            },
            kind: LetFn(
                Identifier {
                    id: IdentId {
                        id: 1,
                    },
                    span: 1:18; [17, 20],
                },
                [
                    Parameter {
                        identifier: Identifier {
                            id: IdentId {
                                id: 2,
                            },
                            span: 1:22; [21, 24],
                        },
                        ty: Identifier {
                            id: IdentId {
                                id: 3,
                            },
                            span: 1:27; [26, 32],
                        },
                        span: 1:22; [21, 32],
                        state: Unbound,
                    },
                ],
                Return {
                    ret: Some(
                        (
                            Identifier {
                                id: IdentId {
                                    id: 4,
                                },
                                span: 1:36; [35, 42],
                            },
                            Unbound,
                        ),
                    ),
                },
                ExprId {
                    id: 4,
                },
            ),
            span: 1:14; [13, 58],
        },
        Statement {
            id: StmtId {
                id: 3,
            },
            kind: Expression(
                ExprId {
                    id: 6,
                },
            ),
            span: 1:60; [59, 68],
        },
        Statement {
            id: StmtId {
                id: 4,
            },
            kind: Let(
                Identifier {
                    id: IdentId {
                        id: 5,
                    },
                    span: 1:5; [4, 7],
                },
                ExprId {
                    id: 7,
                },
            ),
            span: 1:1; [0, 12],
        },
        Statement {
            id: StmtId {
                id: 5,
            },
            kind: Ret(
                ExprId {
                    id: 10,
                },
                Implicit,
            ),
            span: 1:48; [47, 56],
        },
        Statement {
            id: StmtId {
                id: 6,
            },
            kind: LetFn(
                Identifier {
                    id: IdentId {
                        id: 6,
                    },
                    span: 1:18; [17, 20],
                },
                [
                    Parameter {
                        identifier: Identifier {
                            id: IdentId {
                                id: 7,
                            },
                            span: 1:22; [21, 24],
                        },
                        ty: Identifier {
                            id: IdentId {
                                id: 3,
                            },
                            span: 1:27; [26, 32],
                        },
                        span: 1:22; [21, 32],
                        state: Unbound,
                    },
                ],
                Return {
                    ret: Some(
                        (
                            Identifier {
                                id: IdentId {
                                    id: 4,
                                },
                                span: 1:36; [35, 42],
                            },
                            Unbound,
                        ),
                    ),
                },
                ExprId {
                    id: 11,
                },
            ),
            span: 1:14; [13, 58],
        },
        Statement {
            id: StmtId {
                id: 7,
            },
            kind: Expression(
                ExprId {
                    id: 13,
                },
            ),
            span: 1:60; [59, 68],
        },
    ],
    root: [
        StmtId {
            id: 0,
        },
        StmtId {
            id: 2,
        },
        StmtId {
            id: 3,
        },
        StmtId {
            id: 4,
        },
        StmtId {
            id: 6,
        },
        StmtId {
            id: 7,
        },
    ],
    symbols: [],
    types: [],
    state: WithoutImplicitRet,
}
