---
source: src/resolver.rs
expression: "&ast"
---
Ast {
    identifiers: [
        "f",
        "n",
        "number",
        "add",
        "boolean",
        "div",
        "eq",
        "ge",
        "gt",
        "le",
        "lt",
        "mul",
        "neg",
        "neq",
        "sub",
        "void",
    ],
    identifier_refs: [
        IdentifierRef {
            id: IdentRefId(0),
            ident: Identifier {
                id: IdentId(2),
                span: 1:10; [9, 15],
                bound: Bound(
                    SymbolId(2),
                ),
            },
        },
        IdentifierRef {
            id: IdentRefId(1),
            ident: Identifier {
                id: IdentId(2),
                span: 1:19; [18, 24],
                bound: Bound(
                    SymbolId(2),
                ),
            },
        },
        IdentifierRef {
            id: IdentRefId(2),
            ident: Identifier {
                id: IdentId(1),
                span: 2:8; [34, 35],
                bound: Bound(
                    SymbolId(18),
                ),
            },
        },
        IdentifierRef {
            id: IdentRefId(3),
            ident: Identifier {
                id: IdentId(1),
                span: 3:13; [55, 56],
                bound: Bound(
                    SymbolId(18),
                ),
            },
        },
        IdentifierRef {
            id: IdentRefId(4),
            ident: Identifier {
                id: IdentId(1),
                span: 6:7; [71, 72],
                bound: Bound(
                    SymbolId(18),
                ),
            },
        },
        IdentifierRef {
            id: IdentRefId(5),
            ident: Identifier {
                id: IdentId(0),
                span: 6:5; [69, 70],
                bound: Bound(
                    SymbolId(17),
                ),
            },
        },
        IdentifierRef {
            id: IdentRefId(6),
            ident: Identifier {
                id: IdentId(1),
                span: 6:18; [82, 83],
                bound: Bound(
                    SymbolId(18),
                ),
            },
        },
        IdentifierRef {
            id: IdentRefId(7),
            ident: Identifier {
                id: IdentId(0),
                span: 6:16; [80, 81],
                bound: Bound(
                    SymbolId(17),
                ),
            },
        },
        IdentifierRef {
            id: IdentRefId(8),
            ident: Identifier {
                id: IdentId(0),
                span: 9:1; [93, 94],
                bound: Bound(
                    SymbolId(17),
                ),
            },
        },
        IdentifierRef {
            id: IdentRefId(9),
            ident: Identifier {
                id: IdentId(9),
                span: 2:10; [36, 38],
                bound: Bound(
                    SymbolId(10),
                ),
            },
        },
        IdentifierRef {
            id: IdentRefId(10),
            ident: Identifier {
                id: IdentId(14),
                span: 6:9; [73, 74],
                bound: Bound(
                    SymbolId(4),
                ),
            },
        },
        IdentifierRef {
            id: IdentRefId(11),
            ident: Identifier {
                id: IdentId(14),
                span: 6:20; [84, 85],
                bound: Bound(
                    SymbolId(4),
                ),
            },
        },
        IdentifierRef {
            id: IdentRefId(12),
            ident: Identifier {
                id: IdentId(3),
                span: 6:14; [78, 79],
                bound: Bound(
                    SymbolId(16),
                ),
            },
        },
        IdentifierRef {
            id: IdentRefId(13),
            ident: Identifier {
                id: IdentId(3),
                span: 9:6; [98, 99],
                bound: Bound(
                    SymbolId(16),
                ),
            },
        },
    ],
    expressions: [
        Expression {
            id: ExprId(0),
            kind: Literal(
                Literal {
                    kind: IdentRefId(2),
                    span: 2:8; [34, 35],
                },
            ),
            span: 2:8; [34, 35],
            typed: Typed(
                TypeId(4),
            ),
        },
        Expression {
            id: ExprId(1),
            kind: Literal(
                Literal {
                    kind: Number(1),
                    span: 2:13; [39, 40],
                },
            ),
            span: 2:13; [39, 40],
            typed: Typed(
                TypeId(4),
            ),
        },
        Expression {
            id: ExprId(2),
            kind: FunctionCall(
                IdentRefId(9),
                [
                    ExprId(0),
                    ExprId(1),
                ],
            ),
            span: 2:8; [34, 40],
            typed: Typed(
                TypeId(3),
            ),
        },
        Expression {
            id: ExprId(3),
            kind: Literal(
                Literal {
                    kind: IdentRefId(3),
                    span: 3:13; [55, 56],
                },
            ),
            span: 3:13; [55, 56],
            typed: Typed(
                TypeId(4),
            ),
        },
        Expression {
            id: ExprId(4),
            kind: Block(
                [
                    StmtId(0),
                ],
            ),
            span: 2:15; [41, 63],
            typed: Typed(
                TypeId(2),
            ),
        },
        Expression {
            id: ExprId(5),
            kind: If(
                ExprId(2),
                ExprId(4),
                None,
            ),
            span: 2:5; [31, 63],
            typed: Typed(
                TypeId(1),
            ),
        },
        Expression {
            id: ExprId(6),
            kind: Literal(
                Literal {
                    kind: IdentRefId(4),
                    span: 6:7; [71, 72],
                },
            ),
            span: 6:7; [71, 72],
            typed: Typed(
                TypeId(4),
            ),
        },
        Expression {
            id: ExprId(7),
            kind: Literal(
                Literal {
                    kind: Number(1),
                    span: 6:11; [75, 76],
                },
            ),
            span: 6:11; [75, 76],
            typed: Typed(
                TypeId(4),
            ),
        },
        Expression {
            id: ExprId(8),
            kind: FunctionCall(
                IdentRefId(10),
                [
                    ExprId(6),
                    ExprId(7),
                ],
            ),
            span: 6:7; [71, 76],
            typed: Typed(
                TypeId(4),
            ),
        },
        Expression {
            id: ExprId(9),
            kind: FunctionCall(
                IdentRefId(5),
                [
                    ExprId(8),
                ],
            ),
            span: 6:5; [69, 77],
            typed: Typed(
                TypeId(4),
            ),
        },
        Expression {
            id: ExprId(10),
            kind: Literal(
                Literal {
                    kind: IdentRefId(6),
                    span: 6:18; [82, 83],
                },
            ),
            span: 6:18; [82, 83],
            typed: Typed(
                TypeId(4),
            ),
        },
        Expression {
            id: ExprId(11),
            kind: Literal(
                Literal {
                    kind: Number(2),
                    span: 6:22; [86, 87],
                },
            ),
            span: 6:22; [86, 87],
            typed: Typed(
                TypeId(4),
            ),
        },
        Expression {
            id: ExprId(12),
            kind: FunctionCall(
                IdentRefId(11),
                [
                    ExprId(10),
                    ExprId(11),
                ],
            ),
            span: 6:18; [82, 87],
            typed: Typed(
                TypeId(4),
            ),
        },
        Expression {
            id: ExprId(13),
            kind: FunctionCall(
                IdentRefId(7),
                [
                    ExprId(12),
                ],
            ),
            span: 6:16; [80, 88],
            typed: Typed(
                TypeId(4),
            ),
        },
        Expression {
            id: ExprId(14),
            kind: FunctionCall(
                IdentRefId(12),
                [
                    ExprId(9),
                    ExprId(13),
                ],
            ),
            span: 6:5; [69, 88],
            typed: Typed(
                TypeId(4),
            ),
        },
        Expression {
            id: ExprId(15),
            kind: Block(
                [
                    StmtId(1),
                    StmtId(2),
                ],
            ),
            span: 1:26; [25, 91],
            typed: Typed(
                TypeId(2),
            ),
        },
        Expression {
            id: ExprId(16),
            kind: Literal(
                Literal {
                    kind: Number(9),
                    span: 9:3; [95, 96],
                },
            ),
            span: 9:3; [95, 96],
            typed: Typed(
                TypeId(4),
            ),
        },
        Expression {
            id: ExprId(17),
            kind: FunctionCall(
                IdentRefId(8),
                [
                    ExprId(16),
                ],
            ),
            span: 9:1; [93, 97],
            typed: Typed(
                TypeId(4),
            ),
        },
        Expression {
            id: ExprId(18),
            kind: Literal(
                Literal {
                    kind: Number(8),
                    span: 9:8; [100, 101],
                },
            ),
            span: 9:8; [100, 101],
            typed: Typed(
                TypeId(4),
            ),
        },
        Expression {
            id: ExprId(19),
            kind: FunctionCall(
                IdentRefId(13),
                [
                    ExprId(17),
                    ExprId(18),
                ],
            ),
            span: 9:1; [93, 101],
            typed: Typed(
                TypeId(4),
            ),
        },
    ],
    statements: [
        Statement {
            id: StmtId(0),
            kind: Ret(
                ExprId(3),
                Explicit,
            ),
            span: 3:9; [51, 57],
        },
        Statement {
            id: StmtId(1),
            kind: Expression(
                ExprId(5),
            ),
            span: 2:5; [31, 63],
        },
        Statement {
            id: StmtId(2),
            kind: Ret(
                ExprId(14),
                Implicit,
            ),
            span: 6:5; [69, 89],
        },
        Statement {
            id: StmtId(3),
            kind: LetFn(
                Identifier {
                    id: IdentId(0),
                    span: 1:5; [4, 5],
                    bound: Bound(
                        SymbolId(17),
                    ),
                },
                [
                    Parameter {
                        identifier: Identifier {
                            id: IdentId(1),
                            span: 1:7; [6, 7],
                            bound: Bound(
                                SymbolId(18),
                            ),
                        },
                        ty: IdentRefId(0),
                        span: 1:7; [6, 15],
                        typed: Typed(
                            TypeId(4),
                        ),
                    },
                ],
                Return {
                    ret: Some(
                        IdentRefId(1),
                    ),
                },
                ExprId(15),
            ),
            span: 1:1; [0, 91],
        },
        Statement {
            id: StmtId(4),
            kind: Expression(
                ExprId(19),
            ),
            span: 9:1; [93, 102],
        },
    ],
    root: [
        StmtId(3),
        StmtId(4),
    ],
    symbols: [
        Symbol {
            id: SymbolId(0),
            kind: NotFound,
            ty: TypeId(0),
        },
        Symbol {
            id: SymbolId(1),
            kind: NativeType(
                IdentId(15),
                Void,
            ),
            ty: TypeId(2),
        },
        Symbol {
            id: SymbolId(2),
            kind: NativeType(
                IdentId(2),
                Number,
            ),
            ty: TypeId(2),
        },
        Symbol {
            id: SymbolId(3),
            kind: NativeType(
                IdentId(4),
                Boolean,
            ),
            ty: TypeId(2),
        },
        Symbol {
            id: SymbolId(4),
            kind: Native(
                IdentId(14),
                [
                    TypeId(4),
                    TypeId(4),
                ],
                TypeId(4),
                native,
            ),
            ty: TypeId(5),
        },
        Symbol {
            id: SymbolId(5),
            kind: Native(
                IdentId(13),
                [
                    TypeId(4),
                    TypeId(4),
                ],
                TypeId(3),
                native,
            ),
            ty: TypeId(6),
        },
        Symbol {
            id: SymbolId(6),
            kind: Native(
                IdentId(13),
                [
                    TypeId(3),
                    TypeId(3),
                ],
                TypeId(3),
                native,
            ),
            ty: TypeId(7),
        },
        Symbol {
            id: SymbolId(7),
            kind: Native(
                IdentId(12),
                [
                    TypeId(4),
                ],
                TypeId(4),
                native,
            ),
            ty: TypeId(8),
        },
        Symbol {
            id: SymbolId(8),
            kind: Native(
                IdentId(11),
                [
                    TypeId(4),
                    TypeId(4),
                ],
                TypeId(4),
                native,
            ),
            ty: TypeId(5),
        },
        Symbol {
            id: SymbolId(9),
            kind: Native(
                IdentId(10),
                [
                    TypeId(4),
                    TypeId(4),
                ],
                TypeId(3),
                native,
            ),
            ty: TypeId(6),
        },
        Symbol {
            id: SymbolId(10),
            kind: Native(
                IdentId(9),
                [
                    TypeId(4),
                    TypeId(4),
                ],
                TypeId(3),
                native,
            ),
            ty: TypeId(6),
        },
        Symbol {
            id: SymbolId(11),
            kind: Native(
                IdentId(8),
                [
                    TypeId(4),
                    TypeId(4),
                ],
                TypeId(3),
                native,
            ),
            ty: TypeId(6),
        },
        Symbol {
            id: SymbolId(12),
            kind: Native(
                IdentId(7),
                [
                    TypeId(4),
                    TypeId(4),
                ],
                TypeId(3),
                native,
            ),
            ty: TypeId(6),
        },
        Symbol {
            id: SymbolId(13),
            kind: Native(
                IdentId(6),
                [
                    TypeId(4),
                    TypeId(4),
                ],
                TypeId(3),
                native,
            ),
            ty: TypeId(6),
        },
        Symbol {
            id: SymbolId(14),
            kind: Native(
                IdentId(6),
                [
                    TypeId(3),
                    TypeId(3),
                ],
                TypeId(3),
                native,
            ),
            ty: TypeId(7),
        },
        Symbol {
            id: SymbolId(15),
            kind: Native(
                IdentId(5),
                [
                    TypeId(4),
                    TypeId(4),
                ],
                TypeId(4),
                native,
            ),
            ty: TypeId(5),
        },
        Symbol {
            id: SymbolId(16),
            kind: Native(
                IdentId(3),
                [
                    TypeId(4),
                    TypeId(4),
                ],
                TypeId(4),
                native,
            ),
            ty: TypeId(5),
        },
        Symbol {
            id: SymbolId(17),
            kind: LetFn(
                StmtId(3),
                [
                    TypeId(4),
                ],
                TypeId(4),
            ),
            ty: TypeId(8),
        },
        Symbol {
            id: SymbolId(18),
            kind: Parameter(
                StmtId(3),
                0,
            ),
            ty: TypeId(4),
        },
    ],
    types: [
        Invalid,
        Void,
        None,
        Boolean,
        Number,
        Function(
            [
                TypeId(4),
                TypeId(4),
            ],
            TypeId(4),
        ),
        Function(
            [
                TypeId(4),
                TypeId(4),
            ],
            TypeId(3),
        ),
        Function(
            [
                TypeId(3),
                TypeId(3),
            ],
            TypeId(3),
        ),
        Function(
            [
                TypeId(4),
            ],
            TypeId(4),
        ),
    ],
    state: ExitPoints {
        exit_points: {
            ExprId(15): [
                Explicit(
                    ExprId(3),
                ),
                Implicit(
                    ExprId(14),
                ),
            ],
        },
        unreachable: [],
    },
}
